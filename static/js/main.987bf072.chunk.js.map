{"version":3,"sources":["components/Animaton.js","components/Projects.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["scene","camera","renderer","line","starGeo","star","stars","innerline","lineColor","controls","Animaton","state","windowHeight","init","THREE","window","innerWidth","innerHeight","antialias","OrbitControls","domElement","enableZoom","enablePan","setSize","document","body","prepend","classList","add","geometry","edges","color","i","Math","random","velocity","acceleration","vertices","push","sprite","load","console","log","starMaterial","size","map","position","z","animate","forEach","p","y","verticesNeedUpdate","requestAnimationFrame","rotation","x","render","onWindowResize","aspect","updateProjectionMatrix","setState","scrollToBottom","getElementById","scrollIntoView","behavior","addEventListener","this","id","Button","onClick","className","variant","Component","Projects","Navbar","isActive","h1className","ulclassName","canvasHeight","toggleNav","addClass","stickyNav","sticky","navbar","clientHeight","pageYOffset","remove","canvas","getElementsByClassName","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.987bf072.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport Button from 'react-bootstrap/Button';\n\nlet scene, camera, renderer, line, starGeo, star, stars, innerline, lineColor, controls\nclass Animaton extends Component {\n\n    state = {\n        windowHeight: 0\n    }\n\n    init = () => {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1000 );\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    controls = new OrbitControls(camera, renderer.domElement)\n    controls.enableZoom = false;\n    controls.enablePan = false;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.prepend(renderer.domElement );\n    renderer.domElement.classList.add(\"canvas\")\n    const geometry = new THREE.BoxBufferGeometry( 2, 2, 2 );\n    const edges = new THREE.EdgesGeometry( geometry );\n    lineColor = 0xffffff\n    innerline = new THREE.LineSegments( edges, new THREE.LineBasicMaterial( { color: 0x4a7577 } ) );\n    line = new THREE.LineSegments( edges, new THREE.LineBasicMaterial( { color: lineColor } ) );\n    scene.add( line );\n    scene.add( innerline )\n    starGeo = new THREE.Geometry();\n    for (let i = 0; i < 10000; i++){\n        star = new THREE.Vector3(\n            Math.random() * 600 - 300,\n            Math.random() * 600 - 300,\n            Math.random() * 600 - 300\n        )\n        star.velocity = 0;\n        star.acceleration = 0.001;\n        starGeo.vertices.push(star)\n    }\n    let sprite = new THREE.TextureLoader().load(\"star2.png\")\n    console.log(sprite)\n    let starMaterial = new THREE.PointsMaterial({\n        color: 0xaaaaaa,\n        size: 0.1,\n        map: sprite\n    })\n    stars = new THREE.Points(starGeo, starMaterial)\n    scene.add( stars )\n    camera.position.z = 5;\n    }\n\n    animate = () => {\n        starGeo.vertices.forEach((p) =>{\n            p.velocity += p.acceleration;\n            p.y -= p.velocity\n            if (p.y < -200){\n                p.y = 200;\n                p.velocity = 0\n            }\n        })\n        starGeo.verticesNeedUpdate = true;\n        requestAnimationFrame( this.animate );\n        line.rotation.x += 0.01;\n        line.rotation.y -= 0.01;\n        innerline.rotation.x -= 0.01;\n        innerline.rotation.y -= 0.01;\n        renderer.render( scene, camera );\n    };\n\n    onWindowResize = () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        //renderer.setSize(window.innerWidth, window.innerHeight)\n        this.setState({windowHeight: window.innerHeight})\n    }\n\n    scrollToBottom = () => {\n        document.getElementById('nav').scrollIntoView({behavior: \"smooth\"})\n    }\n\n    componentDidMount(){\n    window.addEventListener(\"resize\", this.onWindowResize, false)\n    this.init();\n    this.animate();\n    }\n\n    render() {\n        return (\n        <div id=\"info-bottom\">\n        <Button onClick={this.scrollToBottom} className=\"view-more\" variant=\"outline-success\">View my work</Button>{' '}\n        <h1>{this.state.windowHeight || window.innerHeight}</h1>\n        </div>\n        );\n    }\n}\n\nexport default Animaton;","import React, { Component } from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nclass Projects extends Component {\n\n    render() {\n        return (\n            <div id=\"projects\">\n\n            </div>\n        );\n    }\n}\n\nexport default Projects;","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\n    state = {\n        isActive: false,\n        h1className: \"\",\n        ulclassName: \"nav-links\",\n        canvasHeight: 0\n    }\n\n    toggleNav = () => {\n        this.setState({isActive: !this.state.isActive}, this.addClass)\n    }\n\n    addClass = () => {\n        if (this.state.isActive){\n            this.setState({h1className: \"nav-links-active\", ulclassName: \"nav-links nav-links-active-animation\"})\n        }else{\n            this.setState({h1className: \"\", ulclassName: \"nav-links\"})\n        }\n    }\n\n    stickyNav = (sticky, navbar) => {\n        this.setState({canvasHeight: sticky[0].clientHeight})\n        console.log(window.pageYOffset, this.state.canvasHeight)\n        if (window.pageYOffset >= sticky[0].clientHeight) {\n            navbar.classList.add(\"sticky\")\n          } else {\n            navbar.classList.remove(\"sticky\")\n        }\n        if (this.state.isActive && window.pageYOffset <= this.state.canvasHeight){\n            this.setState({isActive: false, h1className: \"\", ulclassName: \"nav-links\"})\n        }\n    }\n\n    onWindowResize = (canvas) => {\n        this.setState({canvasHeight: canvas[0].clientHeight})\n    }\n\n    componentDidMount(){\n        let canvas = document.getElementsByClassName(\"canvas\")\n        let navbar = document.getElementById('nav')\n        this.setState({canvasHeight: canvas[0].clientHeight})\n        window.addEventListener(\"scroll\", () => this.stickyNav(canvas, navbar), false)\n        window.addEventListener(\"resize\", () => this.onWindowResize(canvas), false)\n    }\n    \n    render() {\n        console.log(this.state)\n        return (\n            <nav id=\"nav\">\n                <ul name=\"hello\" className={this.state.ulclassName}>\n                    <li><h1 className={this.state.h1className}>Home</h1></li>\n                    <li><h1 className={this.state.h1className}>About</h1></li>\n                    <li><h1 className={this.state.h1className}>Portfolio</h1></li>\n                    <li><h1 className={this.state.h1className}>Contact</h1></li>\n                </ul>\n                <div className=\"burger\" onClick={this.toggleNav}>\n                    <div className=\"line1\"></div>\n                    <div className=\"line2\"></div>\n                    <div className=\"line\"></div>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import \"./App.css\";\nimport Animation from \"./components/Animaton\";\nimport Projects from \"./components/Projects\";\nimport Navbar from \"./components/Navbar\";\nfunction App() {\n  return (\n    <div>\n      <Animation />\n      <div id=\"info-top\">\n        <h1 className=\"intro-top\">\n          Hello, I'm<span className=\"name\"> Bradley Wilson</span>\n        </h1>\n        <h1 className=\"intro-bottom\">I'm a full-stack web developer.</h1>\n      </div>\n      <Navbar />\n      <Projects />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}